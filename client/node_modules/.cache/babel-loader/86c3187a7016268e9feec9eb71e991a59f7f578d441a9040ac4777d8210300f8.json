{"ast":null,"code":"var _jsxFileName = \"/Users/cristian/Dev/Claro/push-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4); // Adiciona o padding necessário\n  const base64 = (base64String + padding).replace(/\\-/g, '+') // Replaces '-' with '+'\n  .replace(/_/g, '/'); // Replaces '_' with '/'\n  const rawData = window.atob(base64); // Decodifica de Base64\n  const outputArray = new Uint8Array(rawData.length); // Cria um novo array de bytes\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i); // Preenche o array com os bytes\n  }\n  return outputArray;\n}\n\n// Função para inscrever o cliente em notificações push\nconst subscribeToPushNotifications = async registration => {\n  console.log('Inscrição para notificações push (subscribeToPushNotifications)...');\n  try {\n    const vapidPublicKey = 'BDAFRkRYA-h4r0SFyAFvufV2JCeLE-aDXk8mq9BFZ2yPJsXjqvK2MJu2ilPwo9FDdjd6hdAZfrSs2qO0bXJSe1w';\n    // Converter a chave pública VAPID para Uint8Array\n    const applicationServerKey = urlBase64ToUint8Array(vapidPublicKey);\n\n    // Criar a inscrição\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: applicationServerKey\n    });\n    console.log(subscription);\n    sendSubscriptionToServer(subscription);\n  } catch (error) {\n    console.error('Erro ao se inscrever para notificações push:', error);\n    throw error;\n  }\n};\n\n// Função para enviar a inscrição ao servidor\nconst sendSubscriptionToServer = async subscription => {\n  try {\n    await fetch('http://localhost:3333/subscribe', {\n      method: 'POST',\n      body: JSON.stringify(subscription),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Inscrição enviada ao servidor com sucesso.');\n  } catch (error) {\n    console.error('Erro ao enviar a inscrição ao servidor:', error);\n    throw error;\n  }\n};\nconst App = () => {\n  _s();\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('/sw.js').then(registration => {\n        console.log('Service Worker registrado com sucesso:', registration);\n        subscribeToPushNotifications(registration);\n      }).catch(error => {\n        console.error('Erro ao registrar o Service Worker:', error);\n      });\n    } else {\n      console.error('No serviceWorker in navigator');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Aplicativo React com Notifica\\xE7\\xF5es Push!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","subscribeToPushNotifications","registration","console","log","vapidPublicKey","applicationServerKey","subscription","pushManager","subscribe","userVisibleOnly","sendSubscriptionToServer","error","fetch","method","body","JSON","stringify","headers","App","_s","navigator","serviceWorker","register","then","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cristian/Dev/Claro/push-client/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4); // Adiciona o padding necessário\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+') // Replaces '-' with '+'\n    .replace(/_/g, '/'); // Replaces '_' with '/'\n  const rawData = window.atob(base64); // Decodifica de Base64\n  const outputArray = new Uint8Array(rawData.length); // Cria um novo array de bytes\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i); // Preenche o array com os bytes\n  }\n\n  return outputArray;\n}\n\n// Função para inscrever o cliente em notificações push\nconst subscribeToPushNotifications = async (registration) => {\n  console.log('Inscrição para notificações push (subscribeToPushNotifications)...');\n  try {\n    const vapidPublicKey = 'BDAFRkRYA-h4r0SFyAFvufV2JCeLE-aDXk8mq9BFZ2yPJsXjqvK2MJu2ilPwo9FDdjd6hdAZfrSs2qO0bXJSe1w';\n    // Converter a chave pública VAPID para Uint8Array\n    const applicationServerKey = urlBase64ToUint8Array(vapidPublicKey);\n\n    // Criar a inscrição\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: applicationServerKey,\n    });\n    console.log(subscription);\n    sendSubscriptionToServer(subscription);\n\n  } catch (error) {\n    console.error('Erro ao se inscrever para notificações push:', error);\n    throw error;\n  }\n};\n\n// Função para enviar a inscrição ao servidor\nconst sendSubscriptionToServer = async (subscription) => {\n  try {\n    await fetch('http://localhost:3333/subscribe', {\n      method: 'POST',\n      body: JSON.stringify(subscription),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n    console.log('Inscrição enviada ao servidor com sucesso.');\n  } catch (error) {\n    console.error('Erro ao enviar a inscrição ao servidor:', error);\n    throw error;\n  }\n};\n\nconst App = () => {\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('/sw.js')\n      .then((registration) => {\n        console.log('Service Worker registrado com sucesso:', registration);\n        subscribeToPushNotifications(registration);\n      })\n      .catch((error) => {\n        console.error('Erro ao registrar o Service Worker:', error);\n      });\n    } else {\n      console.error('No serviceWorker in navigator');\n    }\n  }, []);\n\n  return <div className=\"App\">Aplicativo React com Notificações Push!</div>;\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}