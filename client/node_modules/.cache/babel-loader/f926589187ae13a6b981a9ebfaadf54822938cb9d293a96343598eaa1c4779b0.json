{"ast":null,"code":"var _jsxFileName = \"/Users/cristian/Dev/Claro/push-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst subscribeToPushNotifications = async registration => {\n  const response = await fetch('/vapidPublicKey');\n  const {\n    publicKey\n  } = await response.json();\n  const subscription = await registration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(publicKey)\n  });\n  return subscription;\n};\nconst sendSubscriptionToServer = async subscription => {\n  try {\n    const response = await fetch('/subscribe', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(subscription)\n    });\n    if (!response.ok) {\n      throw new Error('Falha ao enviar a assinatura para o servidor.');\n    }\n    console.log('Assinatura enviada ao servidor com sucesso!');\n  } catch (error) {\n    console.error('Erro ao enviar a assinatura:', error);\n  }\n};\nconst urlBase64ToUint8Array = base64String => {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\nconst App = () => {\n  _s();\n  useEffect(() => {\n    // Verifique se o Service Worker já está registrado\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.getRegistrations().then(registrations => {\n        if (registrations.length === 0) {\n          // Registrar o Service Worker, caso ainda não tenha sido registrado\n          navigator.serviceWorker.register('/sw.js').then(registration => {\n            console.log('Service Worker registrado com sucesso:', registration);\n          }).catch(error => {\n            console.error('Erro ao registrar o Service Worker:', error);\n          });\n        }\n      });\n    }\n  }, []); // Apenas na primeira renderização\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Aplicativo React com Service Worker!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","subscribeToPushNotifications","registration","response","fetch","publicKey","json","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","sendSubscriptionToServer","method","headers","body","JSON","stringify","ok","Error","console","log","error","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","App","_s","navigator","serviceWorker","getRegistrations","then","registrations","register","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cristian/Dev/Claro/push-client/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\nconst subscribeToPushNotifications = async (registration) => {\n  const response = await fetch('/vapidPublicKey');\n  const { publicKey } = await response.json();\n\n  const subscription = await registration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(publicKey),\n  });\n\n  return subscription;\n};\n\nconst sendSubscriptionToServer = async (subscription) => {\n  try {\n    const response = await fetch('/subscribe', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(subscription),\n    });\n\n    if (!response.ok) {\n      throw new Error('Falha ao enviar a assinatura para o servidor.');\n    }\n\n    console.log('Assinatura enviada ao servidor com sucesso!');\n  } catch (error) {\n    console.error('Erro ao enviar a assinatura:', error);\n  }\n};\n\nconst urlBase64ToUint8Array = (base64String) => {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\n\nconst App = () => {\n  useEffect(() => {\n    // Verifique se o Service Worker já está registrado\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.getRegistrations().then((registrations) => {\n        if (registrations.length === 0) {\n          // Registrar o Service Worker, caso ainda não tenha sido registrado\n          navigator.serviceWorker.register('/sw.js')\n            .then((registration) => {\n              console.log('Service Worker registrado com sucesso:', registration);\n            })\n            .catch((error) => {\n              console.error('Erro ao registrar o Service Worker:', error);\n            });\n        }\n      });\n    }\n  }, []); // Apenas na primeira renderização\n\n  return <div className=\"App\">Aplicativo React com Service Worker!</div>;\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}