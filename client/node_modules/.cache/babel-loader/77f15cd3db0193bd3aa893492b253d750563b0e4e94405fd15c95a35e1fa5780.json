{"ast":null,"code":"var _jsxFileName = \"/Users/cristian/Dev/Claro/push-client/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function App() {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js');\n      console.log('Service Worker registrado com sucesso:', registration);\n      const subscription = await subscribeToPushNotifications(registration);\n      console.log('Usuário inscrito no Push:', subscription);\n      await sendSubscriptionToServer(subscription);\n    } catch (error) {\n      console.error('Erro ao registrar o Service Worker:', error);\n    }\n  } else {\n    console.error('Service Workers não são suportados neste navegador.');\n  }\n  async function subscribeToPushNotifications(registration) {\n    const publicKey = await fetch('/vapidPublicKey').then(res => res.json()).then(data => data.publicKey);\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      // Garante que as notificações são visíveis ao usuário\n      applicationServerKey: urlBase64ToUint8Array(publicKey) // Converte a chave para o formato correto\n    });\n    return subscription;\n  }\n\n  // Função auxiliar para converter a chave pública\n  function urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n  async function sendSubscriptionToServer(subscription) {\n    try {\n      const response = await fetch('/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(subscription)\n      });\n      if (!response.ok) {\n        throw new Error('Falha ao enviar a assinatura para o servidor.');\n      }\n      console.log('Assinatura enviada ao servidor com sucesso!');\n    } catch (error) {\n      console.error('Erro ao enviar a assinatura:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","jsxDEV","_jsxDEV","App","navigator","registration","serviceWorker","register","console","log","subscription","subscribeToPushNotifications","sendSubscriptionToServer","error","publicKey","fetch","then","res","json","data","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","response","method","headers","body","JSON","stringify","ok","Error","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","_c","$RefreshReg$"],"sources":["/Users/cristian/Dev/Claro/push-client/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nasync function App() {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js');\n      console.log('Service Worker registrado com sucesso:', registration);\n\n      const subscription = await subscribeToPushNotifications(registration);\n      console.log('Usuário inscrito no Push:', subscription);\n\n      await sendSubscriptionToServer(subscription);\n    } catch (error) {\n      console.error('Erro ao registrar o Service Worker:', error);\n    }\n  } else {\n    console.error('Service Workers não são suportados neste navegador.');\n  }\n\n  async function subscribeToPushNotifications(\n    registration: ServiceWorkerRegistration\n  ): Promise<PushSubscription | null> {\n    const publicKey = await fetch('/vapidPublicKey').then(res => res.json()).then(data => data.publicKey);\n  \n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true, // Garante que as notificações são visíveis ao usuário\n      applicationServerKey: urlBase64ToUint8Array(publicKey), // Converte a chave para o formato correto\n    });\n  \n    return subscription;\n  }\n\n  // Função auxiliar para converter a chave pública\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nasync function sendSubscriptionToServer(subscription: PushSubscription) {\n  try {\n    const response = await fetch('/subscribe', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(subscription),\n    });\n\n    if (!response.ok) {\n      throw new Error('Falha ao enviar a assinatura para o servidor.');\n    }\n\n    console.log('Assinatura enviada ao servidor com sucesso!');\n  } catch (error) {\n    console.error('Erro ao enviar a assinatura:', error);\n  }\n}\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}