{"ast":null,"code":"var _jsxFileName = \"/Users/cristian/Dev/Claro/push-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  useEffect(() => {\n    const registerServiceWorker = async () => {\n      if ('serviceWorker' in navigator) {\n        try {\n          const registration = await navigator.serviceWorker.register('/sw.js');\n          console.log('Service Worker registrado com sucesso:', registration);\n          const subscription = await subscribeToPushNotifications(registration);\n          console.log('Usuário inscrito no Push:', subscription);\n          await sendSubscriptionToServer(subscription);\n        } catch (error) {\n          console.error('Erro ao registrar o Service Worker:', error);\n        }\n      } else {\n        console.error('Service Workers não são suportados neste navegador.');\n      }\n    };\n    const subscribeToPushNotifications = async registration => {\n      const response = await fetch('/vapidPublicKey');\n      const {\n        publicKey\n      } = await response.json();\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicKey)\n      });\n      return subscription;\n    };\n    const sendSubscriptionToServer = async subscription => {\n      try {\n        const response = await fetch('/subscribe', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(subscription)\n        });\n        if (!response.ok) {\n          throw new Error('Falha ao enviar a assinatura para o servidor.');\n        }\n        console.log('Assinatura enviada ao servidor com sucesso!');\n      } catch (error) {\n        console.error('Erro ao enviar a assinatura:', error);\n      }\n    };\n    const urlBase64ToUint8Array = base64String => {\n      const padding = '='.repeat((4 - base64String.length % 4) % 4);\n      const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n      const rawData = window.atob(base64);\n      const outputArray = new Uint8Array(rawData.length);\n      for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n      }\n      return outputArray;\n    };\n    registerServiceWorker();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Seu aplicativo React est\\xE1 rodando!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","App","_s","registerServiceWorker","navigator","registration","serviceWorker","register","console","log","subscription","subscribeToPushNotifications","sendSubscriptionToServer","error","response","fetch","publicKey","json","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","method","headers","body","JSON","stringify","ok","Error","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cristian/Dev/Claro/push-client/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\nconst App = () => {\n  useEffect(() => {\n    const registerServiceWorker = async () => {\n      if ('serviceWorker' in navigator) {\n        try {\n          const registration = await navigator.serviceWorker.register('/sw.js');\n          console.log('Service Worker registrado com sucesso:', registration);\n\n          const subscription = await subscribeToPushNotifications(registration);\n          console.log('Usuário inscrito no Push:', subscription);\n\n          await sendSubscriptionToServer(subscription);\n        } catch (error) {\n          console.error('Erro ao registrar o Service Worker:', error);\n        }\n      } else {\n        console.error('Service Workers não são suportados neste navegador.');\n      }\n    };\n\n    const subscribeToPushNotifications = async (registration) => {\n      const response = await fetch('/vapidPublicKey');\n      const { publicKey } = await response.json();\n\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicKey),\n      });\n\n      return subscription;\n    };\n\n    const sendSubscriptionToServer = async (subscription) => {\n      try {\n        const response = await fetch('/subscribe', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(subscription),\n        });\n\n        if (!response.ok) {\n          throw new Error('Falha ao enviar a assinatura para o servidor.');\n        }\n\n        console.log('Assinatura enviada ao servidor com sucesso!');\n      } catch (error) {\n        console.error('Erro ao enviar a assinatura:', error);\n      }\n    };\n\n    const urlBase64ToUint8Array = (base64String) => {\n      const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n      const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n      const rawData = window.atob(base64);\n      const outputArray = new Uint8Array(rawData.length);\n\n      for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n      }\n      return outputArray;\n    };\n\n    registerServiceWorker();\n  }, []);\n\n  return <div className=\"App\">Seu aplicativo React está rodando!</div>;\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}