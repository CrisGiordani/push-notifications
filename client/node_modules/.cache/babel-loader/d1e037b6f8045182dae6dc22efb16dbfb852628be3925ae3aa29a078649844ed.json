{"ast":null,"code":"var _jsxFileName = \"/Users/cristian/Dev/Claro/push-client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this));\nasync function registerServiceWorker() {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js');\n      console.log('Service Worker registrado com sucesso:', registration);\n      const subscription = await subscribeToPushNotifications(registration);\n      console.log('Usuário inscrito no Push:', subscription);\n      await sendSubscriptionToServer(subscription);\n    } catch (error) {\n      console.error('Erro ao registrar o Service Worker:', error);\n    }\n  } else {\n    console.error('Service Workers não são suportados neste navegador.');\n  }\n}\nasync function subscribeToPushNotifications(registration) {\n  const publicKey = await fetch('/vapidPublicKey').then(res => res.json()).then(data => data.publicKey);\n  const subscription = await registration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Garante que as notificações são visíveis ao usuário\n    applicationServerKey: urlBase64ToUint8Array(publicKey) // Converte a chave para o formato correto\n  });\n  return subscription;\n}\n\n// Função auxiliar para converter a chave pública\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\nasync function sendSubscriptionToServer(subscription) {\n  try {\n    const response = await fetch('/subscribe', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(subscription)\n    });\n    if (!response.ok) {\n      throw new Error('Falha ao enviar a assinatura para o servidor.');\n    }\n    console.log('Assinatura enviada ao servidor com sucesso!');\n  } catch (error) {\n    console.error('Erro ao enviar a assinatura:', error);\n  }\n}","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","registerServiceWorker","navigator","registration","serviceWorker","register","console","log","subscription","subscribeToPushNotifications","sendSubscriptionToServer","error","publicKey","fetch","then","res","json","data","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","response","method","headers","body","JSON","stringify","ok","Error"],"sources":["/Users/cristian/Dev/Claro/push-client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nasync function registerServiceWorker() {\n  if ('serviceWorker' in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js');\n      console.log('Service Worker registrado com sucesso:', registration);\n\n      const subscription = await subscribeToPushNotifications(registration);\n      console.log('Usuário inscrito no Push:', subscription);\n\n      await sendSubscriptionToServer(subscription);\n    } catch (error) {\n      console.error('Erro ao registrar o Service Worker:', error);\n    }\n  } else {\n    console.error('Service Workers não são suportados neste navegador.');\n  }\n}\n\nasync function subscribeToPushNotifications(\n  registration: ServiceWorkerRegistration\n): Promise<PushSubscription | null> {\n  const publicKey = await fetch('/vapidPublicKey').then(res => res.json()).then(data => data.publicKey);\n\n  const subscription = await registration.pushManager.subscribe({\n    userVisibleOnly: true, // Garante que as notificações são visíveis ao usuário\n    applicationServerKey: urlBase64ToUint8Array(publicKey), // Converte a chave para o formato correto\n  });\n\n  return subscription;\n}\n\n// Função auxiliar para converter a chave pública\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\nconst padding = '='.repeat((4 - (base64String.length % 4)) % 4);\nconst base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\nconst rawData = window.atob(base64);\nconst outputArray = new Uint8Array(rawData.length);\n\nfor (let i = 0; i < rawData.length; ++i) {\n  outputArray[i] = rawData.charCodeAt(i);\n}\nreturn outputArray;\n}\n\nasync function sendSubscriptionToServer(subscription: PushSubscription) {\ntry {\n  const response = await fetch('/subscribe', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(subscription),\n  });\n\n  if (!response.ok) {\n    throw new Error('Falha ao enviar a assinatura para o servidor.');\n  }\n\n  console.log('Assinatura enviada ao servidor com sucesso!');\n} catch (error) {\n  console.error('Erro ao enviar a assinatura:', error);\n}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}