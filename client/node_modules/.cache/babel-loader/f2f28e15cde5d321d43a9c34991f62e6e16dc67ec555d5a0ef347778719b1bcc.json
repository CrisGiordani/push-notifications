{"ast":null,"code":"var _jsxFileName = \"/Users/cristian/Dev/Claro/push-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  useEffect(() => {\n    // Verifique se o Service Worker já está registrado\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.getRegistrations().then(registrations => {\n        if (registrations.length === 0) {\n          // Registrar o Service Worker, caso ainda não tenha sido registrado\n          navigator.serviceWorker.register('/sw.js').then(registration => {\n            console.log('Service Worker registrado com sucesso:', registration);\n          }).catch(error => {\n            console.error('Erro ao registrar o Service Worker:', error);\n          });\n        }\n      });\n    }\n    const subscribeToPushNotifications = async registration => {\n      const response = await fetch('/vapidPublicKey');\n      const {\n        publicKey\n      } = await response.json();\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicKey)\n      });\n      return subscription;\n    };\n    const sendSubscriptionToServer = async subscription => {\n      try {\n        const response = await fetch('/subscribe', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(subscription)\n        });\n        if (!response.ok) {\n          throw new Error('Falha ao enviar a assinatura para o servidor.');\n        }\n        console.log('Assinatura enviada ao servidor com sucesso!');\n      } catch (error) {\n        console.error('Erro ao enviar a assinatura:', error);\n      }\n    };\n    const urlBase64ToUint8Array = base64String => {\n      const padding = '='.repeat((4 - base64String.length % 4) % 4);\n      const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n      const rawData = window.atob(base64);\n      const outputArray = new Uint8Array(rawData.length);\n      for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n      }\n      return outputArray;\n    };\n  }, []); // Apenas na primeira renderização\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Aplicativo React com Service Worker!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","App","_s","navigator","serviceWorker","getRegistrations","then","registrations","length","register","registration","console","log","catch","error","subscribeToPushNotifications","response","fetch","publicKey","json","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","sendSubscriptionToServer","method","headers","body","JSON","stringify","ok","Error","base64String","padding","repeat","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cristian/Dev/Claro/push-client/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\nconst App = () => {\n  useEffect(() => {\n    // Verifique se o Service Worker já está registrado\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.getRegistrations().then((registrations) => {\n        if (registrations.length === 0) {\n          // Registrar o Service Worker, caso ainda não tenha sido registrado\n          navigator.serviceWorker.register('/sw.js')\n            .then((registration) => {\n              console.log('Service Worker registrado com sucesso:', registration);\n            })\n            .catch((error) => {\n              console.error('Erro ao registrar o Service Worker:', error);\n            });\n        }\n      });\n    }\n\n    const subscribeToPushNotifications = async (registration) => {\n      const response = await fetch('/vapidPublicKey');\n      const { publicKey } = await response.json();\n    \n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicKey),\n      });\n    \n      return subscription;\n    };\n    \n    const sendSubscriptionToServer = async (subscription) => {\n      try {\n        const response = await fetch('/subscribe', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(subscription),\n        });\n    \n        if (!response.ok) {\n          throw new Error('Falha ao enviar a assinatura para o servidor.');\n        }\n    \n        console.log('Assinatura enviada ao servidor com sucesso!');\n      } catch (error) {\n        console.error('Erro ao enviar a assinatura:', error);\n      }\n    };\n    \n    const urlBase64ToUint8Array = (base64String) => {\n      const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n      const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n      const rawData = window.atob(base64);\n      const outputArray = new Uint8Array(rawData.length);\n    \n      for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n      }\n      return outputArray;\n    };\n  }, []); // Apenas na primeira renderização\n\n  return <div className=\"App\">Aplicativo React com Service Worker!</div>;\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}