{"ast":null,"code":"var _jsxFileName = \"/Users/cristian/Dev/Claro/push-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        if (!registration.active) {\n          return navigator.serviceWorker.register('/sw.js');\n        }\n        return registration;\n      }).then(async registration => {\n        console.log('Service Worker registrado ou já ativo:', registration);\n\n        // Após o registro do Service Worker, inscreva-se para notificações push\n        const subscription = await subscribeToPushNotifications(registration);\n        console.log('Inscrição concluída:', subscription);\n\n        // Envie a inscrição para o servidor\n        await sendSubscriptionToServer(subscription);\n      }).catch(error => {\n        console.error('Erro ao registrar o Service Worker:', error);\n      });\n    }\n  }, []); // Apenas na primeira renderização\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Aplicativo React com Notifica\\xE7\\xF5es Push!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n\n// Função para inscrever o cliente em notificações push\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nconst subscribeToPushNotifications = async registration => {\n  try {\n    const vapidPublicKey = 'BNNbmPnVBABMTWX-Q8UOC115S2S8YcM9KafLpNbhqNyfHNMT2ViomAIlJGJj2JlYSlUuCiHPwLm7AnTBdLQFKbk';\n\n    // Criar a inscrição\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: vapidPublicKey\n    });\n    return subscription;\n  } catch (error) {\n    console.error('Erro ao se inscrever para notificações push:', error);\n    throw error;\n  }\n};\n\n// Função para enviar a inscrição ao servidor\nconst sendSubscriptionToServer = async subscription => {\n  try {\n    await fetch('/subscribe', {\n      method: 'POST',\n      body: JSON.stringify(subscription),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Inscrição enviada ao servidor com sucesso.');\n  } catch (error) {\n    console.error('Erro ao enviar a inscrição ao servidor:', error);\n    throw error;\n  }\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","App","_s","navigator","serviceWorker","ready","then","registration","active","register","console","log","subscription","subscribeToPushNotifications","sendSubscriptionToServer","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","vapidPublicKey","pushManager","subscribe","userVisibleOnly","applicationServerKey","fetch","method","body","JSON","stringify","headers","$RefreshReg$"],"sources":["/Users/cristian/Dev/Claro/push-client/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\nconst App = () => {\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          if (!registration.active) {\n            return navigator.serviceWorker.register('/sw.js');\n          }\n          return registration;\n        })\n        .then(async (registration) => {\n          console.log('Service Worker registrado ou já ativo:', registration);\n\n          // Após o registro do Service Worker, inscreva-se para notificações push\n          const subscription = await subscribeToPushNotifications(registration);\n          console.log('Inscrição concluída:', subscription);\n\n          // Envie a inscrição para o servidor\n          await sendSubscriptionToServer(subscription);\n        })\n        .catch((error) => {\n          console.error('Erro ao registrar o Service Worker:', error);\n        });\n    }\n  }, []); // Apenas na primeira renderização\n\n  return <div className=\"App\">Aplicativo React com Notificações Push!</div>;\n};\n\n// Função para inscrever o cliente em notificações push\nconst subscribeToPushNotifications = async (registration) => {\n  try {\n    const vapidPublicKey = 'BNNbmPnVBABMTWX-Q8UOC115S2S8YcM9KafLpNbhqNyfHNMT2ViomAIlJGJj2JlYSlUuCiHPwLm7AnTBdLQFKbk';\n\n    // Criar a inscrição\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: vapidPublicKey,\n    });\n\n    return subscription;\n  } catch (error) {\n    console.error('Erro ao se inscrever para notificações push:', error);\n    throw error;\n  }\n};\n\n// Função para enviar a inscrição ao servidor\nconst sendSubscriptionToServer = async (subscription) => {\n  try {\n    await fetch('/subscribe', {\n      method: 'POST',\n      body: JSON.stringify(subscription),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    console.log('Inscrição enviada ao servidor com sucesso.');\n  } catch (error) {\n    console.error('Erro ao enviar a inscrição ao servidor:', error);\n    throw error;\n  }\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChBJ,SAAS,CAAC,MAAM;IACd,IAAI,eAAe,IAAIK,SAAS,EAAE;MAChCA,SAAS,CAACC,aAAa,CAACC,KAAK,CAC1BC,IAAI,CAAEC,YAAY,IAAK;QACtB,IAAI,CAACA,YAAY,CAACC,MAAM,EAAE;UACxB,OAAOL,SAAS,CAACC,aAAa,CAACK,QAAQ,CAAC,QAAQ,CAAC;QACnD;QACA,OAAOF,YAAY;MACrB,CAAC,CAAC,CACDD,IAAI,CAAC,MAAOC,YAAY,IAAK;QAC5BG,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEJ,YAAY,CAAC;;QAEnE;QACA,MAAMK,YAAY,GAAG,MAAMC,4BAA4B,CAACN,YAAY,CAAC;QACrEG,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEC,YAAY,CAAC;;QAEjD;QACA,MAAME,wBAAwB,CAACF,YAAY,CAAC;MAC9C,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;QAChBN,OAAO,CAACM,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D,CAAC,CAAC;IACN;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBAAOhB,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,EAAC;EAAuC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC3E,CAAC;;AAED;AAAApB,EAAA,CA7BMD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA8BT,MAAMY,4BAA4B,GAAG,MAAON,YAAY,IAAK;EAC3D,IAAI;IACF,MAAMiB,cAAc,GAAG,yFAAyF;;IAEhH;IACA,MAAMZ,YAAY,GAAG,MAAML,YAAY,CAACkB,WAAW,CAACC,SAAS,CAAC;MAC5DC,eAAe,EAAE,IAAI;MACrBC,oBAAoB,EAAEJ;IACxB,CAAC,CAAC;IAEF,OAAOZ,YAAY;EACrB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACpE,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMF,wBAAwB,GAAG,MAAOF,YAAY,IAAK;EACvD,IAAI;IACF,MAAMiB,KAAK,CAAC,YAAY,EAAE;MACxBC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACrB,YAAY,CAAC;MAClCsB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACFxB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;EAC3D,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAef,GAAG;AAAC,IAAAsB,EAAA;AAAAY,YAAA,CAAAZ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}